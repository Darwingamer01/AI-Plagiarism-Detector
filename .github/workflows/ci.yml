name: AI Plagiarism Detector CI

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

env:
  # Ensure API_KEY is available in CI environment
  API_KEY: demo-secret
  # Add environment variables for stable CI testing
  PYTHONPATH: ${{ github.workspace }}
  PYTEST_TIMEOUT: 300

jobs:
  test:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: ["3.10", "3.11"]

    steps:
    - uses: actions/checkout@v4

    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}

    - name: Cache pip dependencies
      uses: actions/cache@v3
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-

    - name: Cache Hugging Face & Torch caches
      uses: actions/cache@v3
      with:
        path: |
          ~/.cache/huggingface
          ~/.cache/torch
          ~/.cache/transformers
        key: ${{ runner.os }}-hf-${{ hashFiles('**/requirements.txt') }}
        restore-keys: |
          ${{ runner.os }}-hf-

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt

    - name: Create test directories
      run: |
        mkdir -p sample_docs
        mkdir -p data
        mkdir -p tests
        
        # Create sample test files that tests expect
        echo "Machine learning is a subset of artificial intelligence that focuses on algorithms and statistical models that enable computer systems to automatically improve their performance on a specific task through experience." > sample_docs/original.txt
        echo "AI technology encompasses machine learning techniques that allow computer systems to learn and adapt from data without being explicitly programmed for each task." > sample_docs/similar.txt
        echo "Weather patterns in tropical regions are influenced by ocean currents, atmospheric pressure systems, and seasonal monsoon cycles." > sample_docs/different.txt

    - name: Pre-warm model cache for tests
      run: |
        python -c "
        import os
        os.environ['TRANSFORMERS_CACHE'] = os.path.expanduser('~/.cache/transformers')
        os.environ['HF_HOME'] = os.path.expanduser('~/.cache/huggingface')
        
        from sentence_transformers import SentenceTransformer
        import time
        print('Pre-warming sentence transformer model...')
        start_time = time.time()
        model = SentenceTransformer('sentence-transformers/all-MiniLM-L6-v2')
        load_time = time.time() - start_time
        print(f'Model loaded successfully in {load_time:.2f} seconds')
        print(f'Model dimensions: {model.get_sentence_embedding_dimension()}')
        
        # Test a basic encoding to ensure everything works
        test_embedding = model.encode(['Test sentence'])
        print(f'Test embedding shape: {test_embedding.shape}')
        print('‚úÖ Model pre-warming completed successfully!')
        "

    - name: Test backend imports
      run: |
        echo "Testing core backend imports..."
        python -c "
        import sys
        import os
        
        # Ensure the project root is in Python path
        project_root = os.getcwd()
        if project_root not in sys.path:
            sys.path.insert(0, project_root)
            
        try:
            from apps.backend.main import app
            print('‚úÖ FastAPI app imports successfully')
            from apps.backend.processor import DocumentProcessor
            print('‚úÖ DocumentProcessor imports successfully')
            
            # Test processor initialization
            processor = DocumentProcessor()
            print('‚úÖ DocumentProcessor initializes successfully')
            
            # Test key methods exist
            assert hasattr(processor, 'get_status'), 'get_status method missing'
            assert hasattr(processor, 'ingest'), 'ingest method missing'  
            assert hasattr(processor, 'check'), 'check method missing'
            print('‚úÖ All required methods present')
            
            # Test status method works
            status = processor.get_status()
            print(f'‚úÖ Status method works: {status}')
            
            print('üéâ All critical imports and methods working!')
        except ImportError as e:
            print(f'‚ùå Import error: {e}')
            import traceback
            traceback.print_exc()
            exit(1)
        except Exception as e:
            print(f'‚ùå Initialization error: {e}')
            import traceback  
            traceback.print_exc()
            exit(1)
        "

    - name: Set environment for tests
      run: |
        export API_KEY=demo-secret
        export PYTHONPATH="${{ github.workspace }}"
        echo "API_KEY=demo-secret" >> $GITHUB_ENV
        echo "PYTHONPATH=${{ github.workspace }}" >> $GITHUB_ENV

    - name: Run tests with increased verbosity
      run: |
        echo "Running test suite with increased verbosity..."
        echo "Current directory: $(pwd)"
        echo "Python path: $PYTHONPATH"
        echo "API_KEY: $API_KEY"
        echo "Files in sample_docs:"
        ls -la sample_docs/ || echo "No sample_docs directory"
        
        # Run tests with maximum verbosity and longer timeout
        python -m pytest tests/ -v -s --tb=long --timeout=60 --durations=10
        
        echo "All tests completed successfully!"

  docker:
    runs-on: ubuntu-latest
    needs: test
    steps:
    - uses: actions/checkout@v4

    - name: Build Docker image
      run: |
        echo "Building Docker image..."
        docker build -t ai-plagiarism-detector:test .

    - name: Test Docker container health
      run: |
        echo "Starting container for health checks..."
        docker run -d --name test-container -p 8000:8000 \
          -e API_KEY=test-secret \
          ai-plagiarism-detector:test

        echo "Waiting for container to be ready..."
        for i in {1..12}; do
          if curl -f http://localhost:8000/health >/dev/null 2>&1; then
            echo "‚úÖ Container is healthy!"
            break
          fi
          echo "Waiting... (attempt $i/12)"
          sleep 5
        done

        echo "Testing API authentication..."
        response=$(curl -s -o /dev/null -w "%{http_code}" \
          -H "X-API-KEY: test-secret" http://localhost:8000/status)
        if [ "$response" = "200" ]; then
          echo "‚úÖ API authentication working!"
        else
          echo "‚ùå API authentication failed with status: $response"
          docker logs test-container
          exit 1
        fi

    - name: Login to Docker Hub
      if: github.ref == 'refs/heads/main' && github.event_name == 'push'
      uses: docker/login-action@v3
      with:
        username: ${{ secrets.DOCKERHUB_USERNAME }}
        password: ${{ secrets.DOCKERHUB_TOKEN }}

    - name: Push to Docker Hub
      if: github.ref == 'refs/heads/main' && github.event_name == 'push'
      run: |
        docker tag ai-plagiarism-detector:test ${{ secrets.DOCKERHUB_USERNAME }}/ai-plagiarism-detector:latest
        docker push ${{ secrets.DOCKERHUB_USERNAME }}/ai-plagiarism-detector:latest
        echo "‚úÖ Successfully pushed to Docker Hub!"

    - name: Cleanup
      if: always()
      run: |
        docker stop test-container || true
        docker rm test-container || true
